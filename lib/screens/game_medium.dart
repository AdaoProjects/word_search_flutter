import 'dart:math';

import 'package:flutter/material.dart';
class Game_Medium extends StatefulWidget {
  @override
  _Game_MediumState createState() => _Game_MediumState();
}

class _Game_MediumState extends State<Game_Medium> {
  List<String> puzzle=[ '','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',];
  int count = -1;
  List<String> words=['','','','',''];
  List<String> all =[
'their',
'would',
'about',
'there',
'think',
'which',
'people',
'could',
'other',
'these',
'first',
'thing',
'those',
'woman',
'child',
'after',
'should',
'world',
'school',
'still',
'three',
'state',
'never',
'become',
'really',
'family',
'leave',
'while',
'great',
'group',
'begin',
'where',
'every',
'start',
'might',
'place',
'again',
'system',
'right',
'during',
'small',
'number',
'always',
'night',
'point',
'today',
'bring',
'happen',
'before',
'large',
'under',
'water',
'write',
'mother',
'money',
'story',
'young',
'month',
'study',
'though',
'issue',
'black',
'little',
'house',
'since',
'around',
'friend',
'father',
'until',
'power',
'often',
'among',
'stand',
'member',
'almost',
'later',
'white',
'least',
'learn',
'change',
'minute',
'social',
'watch',
'follow',
'parent',
'create',
'public',
'speak',
'others',
'level',
'allow',
'office',
'spend',
'health',
'person',
'party',
'within',
'result',
'reason',
'early',
'moment',
'force',
'offer',
'enough',
'across',
'second',
'maybe',
'toward',
'policy',
'music',
'appear',
'human',
'serve',
'market',
'expect',
'sense',
'build',
'nation',
'death',
'course',
'behind',
'reach',
'local',
'remain',
'effect',
'class',
'raise',
'field',
'former',
'major',
'along',
'report',
'better',
'effort',
'decide',
'strong',
'heart',
'leader',
'light',
'voice',
'whole',
'police',
'return',
'price',
'carry',
'drive',
'break',
'thank',
'value',
'action',
'model',
'season',
'player',
'agree',
'record',
'paper',
'space',
'ground',
'event',
'whose',
'matter',
'center',
'couple',
'table',
'court',
'teach',
'figure',
'street',
'image',
'itself',
'phone',
'either',
'cover',
'quite',
'clear',
'piece',
'recent',
'doctor',
'worker',
'movie',
'north',
'simply',
'third',
'catch',
'source',
'nearly',
'choose',
'cause',
'window',
'listen',
'chance',
'energy',
'period',
'summer',
'plant',
'likely',
'short',
'letter',
'choice',
'single',
'south',
'floor',
'church',
'close',
'future',
'wrong',
'anyone',
'myself',
'sport',
'board',
'fight',
'throw',
'order',
'author',
'focus',
'blood',
'agency',
'nature',
'color',
'store',
'reduce',
'sound',
'enter',
'share',
'common',
'series',
'animal',
'factor',
'decade',
'shoot',
'seven',
'artist',
'scene',
'stock',
'career',
'eight',
'beyond',
'happy',
'occur',
'media',
'ready',
'simple',
'accept',
'answer',
'argue',
'amount',
'staff',
'growth',
'degree',
'wonder',
'attack',
'region',
'pretty',
'trade',
'arrive',
'lawyer',
'glass',
'skill',
'sister',
'crime',
'stage',
'design',
'indeed',
'truth',
'check',
'rather',
'laugh',
'guess',
'prove',
'entire',
'forget',
'claim',
'remove',
'enjoy',
'legal',
'final',
'green',
'memory',
'above',
'trial',
'expert',
'spring',
'radio',
'visit',
'avoid',
'finish',
'theory',
'impact',
'charge',
'reveal',
'weapon',
'peace',
'apply',
'shake',
'manage',
'chair',
'camera',
'weight',
'treat',
'affect',
'inside',
'style',
'adult',
'worry',
'range',
'writer',
'middle',
'dream',
'stuff',
'detail',
'method',
'hotel',
'heavy',
'sexual',
'tough',
'exist',
'agent',
'owner',
'ahead',
'cancer',
'coach',
'total',
'finger',
'garden',
'notice',
'modern',
'civil',
'budget',
'mouth',
'victim',
'threat',
'smile',
'score',
'dinner',
'relate',
'travel',
'debate',
'front',
'admit',
'senior',
'assume',
'alone',
'suffer',
'speech',
'option',
'fresh',
'forest',
'video',
'global',
'Senate',
'reform',
'access',
'judge',
'credit',
'corner',
'recall',
'stare',
'safety',
'troop',
'income',
'track',
'basic',
'strike',
'plane',
'nobody',
'object',
'labor',
'refer',
'client',
'touch',
'please',
'attend',
'sleep',
'press',
'spirit',
'brain',
'dozen',
'battle',
'sorry',
'crisis',
'stick',
'define',
'easily',
'vision',
'status',
'normal',
'stone',
'slowly',
'scale',
'driver',
'drink',
'handle',
'truck',
'survey',
'winter',
'Soviet',
'refuse',
'sales',
'screen',
'shape',
'reader',
'crowd',
'horse',
'target',
'prison',
'guard',
'terms',
'demand',
'flight',
'emerge',
'quick',
'pound',
'basis',
'bright',
'guest',
'sample',
'block',
'settle',
'highly',
'title',
'mostly',
'lesson',
'faith',
'river',
'living',
'count',
'unless',
'marry',
'border',
'gather',
'limit',
'worth',
'critic',
'aspect',
'insist',
'annual',
'French',
'affair',
'spread',
'ignore',
'belief',
'murder',
'review',
'editor',
'engage',
'coffee',
'speed',
'cross',
'anyway',
'commit',
'female',
'youth',
'afraid',
'native',
'broad',
'twice',
'grade',
'Indian',
'quiet',
'dress',
'aware',
'active',
'extend',
'chief',
'below',
'voter',
'remind',
'moral',
'United',
'depend',
'photo',
'direct',
'daily',
'famous',
'flower',
'supply',
'fully',
'actor',
'birth',
'search',
'circle',
'device',
'bottom',
'island',
'clean',
'studio',
'train',
'damage',
'plate',
'alive',
'intend',
'abuse',
'extra',
'danger',
'desire',
'injury',
'paint',
'climb',
'sweet',
'engine',
'fourth',
'expand',
'metal',
'ticket',
'urban',
'mental',
'lunch',
'farmer',
'sugar',
'planet',
'obtain',
'enemy',
'invite',
'repeat',
'panel',
'pocket',
'breath',
'sight',
'adopt',
'works',
'belong',
'advice',
'empty',
'trail',
'novel',
'breast',
'Iraqi',
'theme',
'storm',
'union',
'thanks',
'fruit',
'yellow',
'prime',
'shadow',
'dance',
'being',
'shift',
'locate',
'county',
'bridge',
'trend',
'profit',
'angry',
'muscle',
'notion',
'prefer',
'truly',
'earth',
'chest',
'thick',
'museum',
'beauty',
'unique',
'ethnic',
'stress',
'select',
'actual',
'bottle',
'hardly',
'launch',
'defend',
'sheet',
'ought',
'ensure',
'extent',
'brown',
'shirt',
'pilot',
'estate',
'guide',
'steal',
'pursue',
'funny',
'Jewish',
'blame',
'crazy',
'chain',
'branch',
'relief',
'manner',
'rating',
'golden',
'motion',
'German',
'gender',
'solve',
'equal',
'forth',
'frame',
'except',
'trust',
'ocean',
'afford',
'regime',
'appeal',
'mirror',
'tooth',
'smart',
'length',
'topic',
'secret',
'nurse',
'aside',
'master',
'doubt',
'grant',
'cloud',
'winner',
'volume',
'pepper',
'cheap',
'beach',
'divide',
'oppose',
'route',
'league',
'upper',
'tired',
'employ',
'fewer',
'apart',
'match',
'barely',
'sector',
'beside',
'proud',
'waste',
'merely',
'wheel',
'invest',
'cable',
'expose',
'rural',
'narrow',
'cream',
'solid',
'noise',
'grass',
'accuse',
'useful',
'reject',
'talent',
'taste',
'escape',
'height',
'assess',
'plenty',
'sharp',
'lower',
'campus',
'proper',
'guilty',
'column',
'signal',
'honor',
'regard',
'twenty',
'knock',
'asset',
'prayer',
'cheese',
'permit',
'bread',
'scream',
'deeply',
'lucky',
'agenda',
'unable',
'arrest',
'brief',
'steel',
'shout',
'visual',
'fairly',
'silent',
'layer',
'slide',
'widely',
'inform',
'bother',
'enable',
'saving',
'desert',
'shall',
'error',
'double',
'print',
'formal',
'album',
'joint',
'reply',
'cycle',
'stream',
'grand',
'hello',
'knife',
'racial',
'phase',
'potato',
'quote',
'online',
'elect',
'jacket',
'rarely',
'sauce',
'priest',
'shock',
'adjust',
'retire',
'habit',
'juice',
'attach',
'severe',
'impose',
'entry',
'symbol',
'maker',
'Asian',
'usual',
'anger',
'round',
'clinic',
'smell',
'tomato',
'butter',
'surely',
'tower',
'smoke',
'glance',
'fellow',
'smooth',
'nearby',
'coast',
'silver',
'inner',
'junior',
'throat',
'salary',
'swing',
'unlike',
'resist',
'assist',
'viewer',
'mayor',
'secure',
'fifth',
'favor',
'weigh',
'recipe',
'wooden',
'false',
'Latin',
'honest',
'essay',
'giant',
'origin',
'advise',
'depth',
'wealth',
'shell',
'onion',
'deputy',
'brand',
'assure',
'award',
'dealer',
'arise',
'armed',
'phrase',
'stake',
'Muslim',
'fiber',
'switch',
'minor',
'killer',
'assign',
'label',
'index',
'draft',
'heaven',
'rough',
'drama',
'clock',
'sweep',
'button',
'super',
'yield',
'fence',
'bunch',
'found',
'burden',
'react',
'string',
'cheek',
'resort',
'tissue',
'broken',
'apple',
'virus',
'stupid',
'occupy',
'cousin',
'blind',
'retain',
'latter',
'slave',
'terror',
'elite',
'bullet',
'tight',
'Bible',
'chart',
'solar',
'square',
'gently',
'strip',
'detect',
'salad',
'pause',
'remote',
'bench',
'lover',
'newly',
'imply',
'mutual',
'pride',
'mainly',
'freeze',
'ideal',
'singer',
'evolve',
'partly',
'thirty',
'crash',
'craft',
'treaty',
'fault',
'loose',
'prior',
'relax',
'stair',
'proof',
'sudden',
'dirty',
'tongue',
'alter',
'stable',
'split',
'steady',
'vital',
'adapt',
'Irish',
'honey',
'vessel',
'tribe',
'shelf',
'buyer',
'dining',
'wisdom',
'garlic',
'poetry',
'scared',
'slight',
'shade',
'mount',
'angle',
'differ',
'custom',
'carbon',
'closer',
'scheme',
'crack',
'galaxy',
'given',
'trace',
'meter',
'rapid',
'hunter',
'infant',
'fifty',
'porch',
'derive',
'fabric',
'rifle',
'trick',
'asleep',
'tennis',
'nerve',
'barrel',
'ratio',
'humor',
'glove',
'modest',
'delay',
'stroke',
'scope',
'badly',
'prompt',
'absorb',
'eager',
'cotton',
'motor',
'flavor',
'float',
'orange',
'assert',
'blade',
'cabin',
'valley',
'yours',
'pitch',
'versus',
'lemon',
'hungry',
'wander',
'submit',
'naked',
'legacy',
'shrug',
'flame',
'wound',
'shower',
'depict',
'flesh',
'garage',
'borrow',
'comedy',
'twelve',
'weekly',
'grain',
'brush',
'devote',
'seize',
'ethics',
'summit',
'gifted',
'medium',
'shore',
'basket',
'powder',
'ghost',
'cookie',
'awful',
'admire',
'exceed',
'rhythm',
'lovely',
'script',
'tactic',
'piano',
'margin',
'mouse',
'chase',
'brick',
'patch',
'horror',
'swear',
'defeat',
'slice',
'sacred',
'exact',
'uncle',
'soccer',
'tunnel',
'grave',
'virtue',
'abroad',
'makeup',
'couch',
'legend',
'shine',
'upset',
'remark',
'resign',
'reward',
'gentle',
'organ',
'invent',
'ritual',
'insect',
'salmon',
'magic',
'combat',
'jeans',
'flour',
'bitter',
'slope',
'subtle',
'bishop',
'candy',
'medal',
'export',
'curve',
'logic',
'harsh',
'closet',
'greet',
'retail',
'march',
'snake',
'excuse',
'flash',
'Islam',
'Roman',
'elbow',
'deadly',
'Korean',
'plead',
'sixth',
'suburb',
'trunk',
'rumor',
'render',
'cloth',
'plain',
'fraud',
'array',
'strict',
'burst',
'motive',
'flood',
'arena',
'drift',
'drain',
'hurry',
'temple',
'random',
'wrist',
'domain',
'guilt',
'cattle',
'fiscal',
'skirt',
'hence',
'endure',
'strain',
'guitar',
'behave',
'dancer',
'await',
'spill',
'grace',
'colony',
'closed',
'towel',
'modify',
'prize',
'boost',
'alarm',
'weird',
'sweat',
'outer',
'drunk',
'govern',
'ballot',
'praise',
'injure',
'chaos',
'canvas',
'forty',
'lobby',
'format',
'trait',
'turkey',
'thumb',
'unity',
'convey',
'twist',
'shame',
'rebel',
'frozen',
'spouse',
'fluid',
'resume',
'sodium',
'bounce',
'click',
'pickup',
'carve',
'needle',
'belly',
'scare',
'timing',
'ankle',
'rescue',
'firmly',
'rider',
'poster',
'crawl',
'oxygen',
'donor',
'pastor',
'opera',
'punish',
'equity',
'statue',
'repair',
'decent',
'clerk',
'purple',
'laser',
'eating',
'parade',
'realm',
'cancel',
'blend',
'pizza',
'candle',
'entity',
'vanish',
'racism',
'casual',
'enroll',
'intent',
'civic',
'steep',
'alien',
'scary',
'angel',
'toilet',
'hidden',
'tender',
'lonely',
'silly',
'shared',
'pillow',
'ruling',
'lately',
'ranch',
'softly',
'verbal',
'tribal',
'import',
'divine',
'elder',
'Dutch',
'Greek',
'genius',
'quest',
'juror',
'broker',
'stiff',
'output',
'toxic',
'grief',
'rocket',
'donate',
'inmate',
'tackle',
'carpet',
'bubble',
'buddy',
'sword',
'glory',
'faint',
'queen',
'input',
'bloody',
'steam',
'accent',
'unite',
'equip',
'shrimp',
'bless',
'bonus',
'mixed',
'orbit',
'grasp',
'spite',
'voting',
'patrol',
'wagon',
'sheer',
'immune',
'exotic',
'thigh',
'drawer',
'sheep',
'runner',
'empire',
'whale',
'skull',
'puzzle',
'tragic',
'safely',
'eleven',
'bureau',
'breeze',
'costly',
'spell',
'insert',
'booth',
'helmet',
'waist',
'royal',
'panic',
'crush',
'cliff',
'casino',
'tumor',
'pulse',
'fixed',
'diary',
'irony',
'spoon',
'midst',
'alley',
'rival',
'punch',
'hockey',
'known',
'purse',
'liquid',
'foster',
'cheat',
'fever',
'filter',
'rabbit',
'dried',
'shove',
'stove',
'alike',
'dough',
'outfit',
'patent',
'trash',
'gross',
'pencil',
'spray',
'banker',
'beast',
'eighth',
'behalf',
'shark',
'fleet',
'stance',
'compel',
'debut',
'scent',
'stack',
'cease',
'nasty',
'shrink',
'wheat',
'fierce',
'aisle',
'weaken',
'vocal',
'openly',
'unfair',
'deploy',
'risky',
'pasta',
'genre',
'merit',
'chunk',
'ladder',
'jungle',
'invade',
'robot',
'sphere',
'boast',
'unfold',
'collar',
'streak',
'added',

];
  @override
  Widget build(BuildContext context) {
    return Scaffold(
        backgroundColor: Colors.white,
        body: Center(
            child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  DataTable(
                    dataRowHeight:MediaQuery. of(context). size. height/17 ,
                      columns: <DataColumn>[
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                      ],
                      columnSpacing: MediaQuery. of(context). size. height/35,
                      rows:[
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                            ]),

                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/35),),
                              ),
                            ]),
                      ]

                  ),
                  SizedBox(width: MediaQuery
                      .of(context)
                      .size
                      .width / 20,
                      height:MediaQuery
                          .of(context)
                          .size
                          .height / 40),
                  Text(words[0]+", "+words[1],
                    style: TextStyle(fontSize: MediaQuery
                        .of(context)
                        .size
                        .height / 30),
                  ),
                  Text(words[2]+", "+ words[3],
                    style: TextStyle(fontSize: MediaQuery
                        .of(context)
                        .size
                        .height / 30),
                  ),
                  Text(words[4],
                    style: TextStyle(fontSize: MediaQuery
                        .of(context)
                        .size
                        .height / 30),)
                ]
            )
        )
    );
  }
  String write_Random_Letter(){
    List<String> letters=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];
    Random random =new Random();
    return letters[random.nextInt(26)];
  }

  String write_Puzzle_Letter() {
    if (count == -1) {
      for (int i = 0; i < 100; i++) {
        puzzle[i] = write_Random_Letter();
      }
      pick_Random_Words();
      write_Puzzle_Words(puzzle, words[0], words[1], words[2], words[3], words[4]);
      words.sort();
    }
    count++;
    return puzzle[count];
  }
  write_Puzzle_Words(List<String> puzzle, String word_one, String word_two, String word_three, String word_four, String word_five) {
    Random random = new Random();
    // the row and column from the 'beginer of the words', rigth is positive and down is positive, later the word can be changed to reversed order so it makes more difficult the puzzle
    int row_one = random.nextInt(10);
    int row_two = random.nextInt(10);
    int row_three = random.nextInt(10 - word_three.length + 1);
    int row_four = random.nextInt(10 - word_four.length + 1);
    int row_five;
    int column_one = random.nextInt(10 - word_one.length + 1);
    int column_two = random.nextInt(10 - word_two.length + 1);
    int column_three = random.nextInt(10);
    int column_four = random.nextInt(10);
    int column_five;

    int direction_of_diagonal = random.nextInt(2);
    //  zero is SO, one is SE
    if(direction_of_diagonal==0){
      row_five = random.nextInt(10 - word_five.length + 1);
      column_five = random.nextInt(10 - word_five.length + 1);

      while (row_one == row_two || ((column_five >= column_one &&
          column_five <= column_one + word_one.length - 1 &&
          row_five <= row_one && row_five + word_five.length - 1 >= row_one) ||
          (column_five >= column_two &&
              column_five <= column_two + word_two.length - 1 &&
              row_five <= row_two &&
              row_five + word_five.length - 1 >= row_two))) {
        row_one = random.nextInt(10);
        row_two = random.nextInt(10);
      }

      while ((column_three >= column_one &&
          column_three <= column_one + word_one.length - 1 &&
          row_three <= row_one && row_three + word_three.length - 1 >= row_one) ||
          (column_three >= column_two &&
              column_three <= column_two + word_two.length - 1 &&
              row_three <= row_two &&
              row_three + word_three.length - 1 >= row_two)||
          (row_five >= row_three &&
              row_five <= row_three + word_three.length - 1 &&
              column_five <= column_three &&
              column_five + word_five.length - 1 >= column_three)) {
        column_three = random.nextInt(10);
        row_three = random.nextInt(10 - word_three.length + 1);

      }
      while ((column_four >= column_one &&
          column_four <= column_one + word_one.length - 1 &&
          row_four <= row_one && row_four + word_four.length - 1 >= row_one) ||
          (column_four >= column_two &&
              column_four <= column_two + word_two.length - 1 &&
              row_four <= row_two &&
              row_four + word_four.length - 1 >= row_two)||
          (row_five >= row_four &&
              row_five <= row_four + word_four.length - 1 &&
              column_five <= column_four &&
              column_five + word_five.length - 1 >= column_four)|| column_four==column_three) {
        column_four = random.nextInt(10);
        row_four = random.nextInt(10 - word_three.length + 1);
      }
    }else{
      row_five = random.nextInt(10 - word_five.length + 1);
      column_five =9- random.nextInt(10 - word_five.length + 1);
      while (row_one == row_two || (column_five >= column_one &&
          column_five <= column_one + word_one.length - 1 &&
          row_five <= row_one && row_five - word_five.length + 1 >= row_one) ||
          (column_five >= column_two &&
              column_five <= column_two + word_two.length - 1 &&
              row_five <= row_two &&
              row_five - word_five.length + 1 >= row_two)) {
        row_one = random.nextInt(10);
        row_two = random.nextInt(10);
      }

      while ((column_three >= column_one &&
          column_three <= column_one + word_one.length - 1 &&
          row_three <= row_one && row_three + word_three.length - 1 >= row_one) ||
          (column_three >= column_two &&
              column_three <= column_two + word_two.length - 1 &&
              row_three <= row_two &&
              row_three + word_three.length - 1 >= row_two)||
          (row_five >= row_three &&
              row_five <= row_three + word_three.length - 1 &&
              column_five <= column_three &&
              column_five - word_five.length - 1 >= column_three)) {
        column_three = random.nextInt(10);
        row_three = random.nextInt(10 - word_three.length + 1);
      }
      while ((column_four >= column_one &&
          column_four <= column_one + word_one.length - 1 &&
          row_four <= row_one && row_four + word_four.length - 1 >= row_one) ||
          (column_four >= column_two &&
              column_four <= column_two + word_two.length - 1 &&
              row_four <= row_two &&
              row_four + word_four.length - 1 >= row_two) ||
          (column_four == column_three)||
          (row_five >= row_four &&
              row_five <= row_four + word_four.length - 1 &&
              column_five <= column_four &&
              column_five + word_five.length - 1 >= column_four)|| column_four==column_three) {
        column_four = random.nextInt(10);
        row_four = random.nextInt(10 - word_three.length + 1);

      }
    }
    // now it just needs to write  the letters in the list string puzzle which in two possible ways original order or reverse order
    if (random.nextInt(2) == 0) {
      for (int i = 0; i < word_one.length; i++) {
        puzzle[row_one * 10 + i + column_one] = word_one[i];
      }
    } else {
      for (int i = 0; i < word_one.length; i++) {
        puzzle[row_one * 10 + i + column_one] = word_one[word_one.length - 1 - i];
      }
    }
    if (random.nextInt(2) == 0) {
      for (int i = 0; i < word_two.length; i++) {
        puzzle[row_two * 10 + i + column_two] = word_two[i];
      }
    } else {
      for (int i = 0; i < word_two.length; i++) {
        puzzle[row_two * 10 + i + column_two] = word_two[word_two.length - 1 - i];
      }
    }

    if (random.nextInt(2) == 0) {
      for (int i = 0; i < word_three.length; i++) {
        puzzle[(row_three + i) * 10 + column_three] = word_three[i];
      }
    } else {
      for (int i = 0; i < word_three.length; i++) {
        puzzle[(row_three + i) * 10 + column_three] = word_three[word_three.length - 1 - i];
      }
    }
    if (random.nextInt(2) == 0) {
      for (int i = 0; i < word_four.length; i++) {
        puzzle[(row_four + i) * 10 + column_four] = word_four[i];
      }
    } else {
      for (int i = 0; i < word_four.length; i++) {
        puzzle[(row_four + i) * 10 + column_four] = word_four[word_four.length - 1 - i];
      }
    }

    if (direction_of_diagonal == 0) {
      if (random.nextInt(2) == 0) {
        for (int i = 0; i < word_five.length; i++) {
          puzzle[(row_five + i) * 10 + column_five + i] = word_five[i];
        }
      } else {
        for (int i = 0; i < word_five.length; i++) {
          puzzle[(row_five + i) * 10 + column_five + i] = word_four[word_four.length - 1 - i];
        }
      }
    }else{
      if (random.nextInt(2) == 0) {
        for (int i = 0; i < word_five.length; i++) {
          puzzle[(row_five + i) * 10 + column_five - i] = word_five[i];
        }
      } else {
        for (int i = 0; i < word_five.length; i++) {
          puzzle[(row_five + i) * 10 + column_five - i] = word_four[word_four.length - 1 - i];
        }
      }
    }
  }

  pick_Random_Words(){
    Random random =new Random();
    int one = random.nextInt(1200);
    int two = random.nextInt(1200);
    int three = random.nextInt(1200);
    int four = random.nextInt(1200);
    int five = random.nextInt(1200);
    while (all[three].length == 6 || all[four].length == 6 || all[five].length == 6 || one==two || one==three || one == four || one==five || two==three || two==four||two==five||three==four||three==five||four==five) {
      one = random.nextInt(1200);
      two = random.nextInt(1200);
      three = random.nextInt(1200);
      four = random.nextInt(1200);
      five = random.nextInt(1200);
    }
    words[0]=all[one].toUpperCase();
    words[1]=all[two].toUpperCase();
    words[2]=all[three].toUpperCase();
    words[3]=all[four].toUpperCase();
    words[4]=all[five].toUpperCase();
  }
}