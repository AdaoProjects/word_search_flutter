import 'dart:math';

import 'package:flutter/material.dart';
class Game_Hard extends StatefulWidget {
  @override
  _Game_HardState createState() => _Game_HardState();
}

class _Game_HardState extends State<Game_Hard> {
  List<String> puzzle=['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',];
  int count = -1;
  List<String> words=['','','','',''];
  List<String> all =[
    'people',
    'because',
    'through',
    'should',
    'school',
    'become',
    'between',
    'really',
    'another',
    'family',
    'student',
    'country',
    'problem',
    'against',
    'company',
    'system',
    'program',
    'during',
    'number',
    'always',
    'believe',
    'happen',
    'without',
    'before',
    'million',
    'mother',
    'though',
    'little',
    'provide',
    'service',
    'around',
    'friend',
    'father',
    'however',
    'member',
    'almost',
    'include',
    'change',
    'minute',
    'several',
    'nothing',
    'social',
    'whether',
    'follow',
    'parent',
    'create',
    'public',
    'already',
    'others',
    'office',
    'health',
    'person',
    'history',
    'within',
    'result',
    'morning',
    'reason',
    'moment',
    'himself',
    'teacher',
    'enough',
    'across',
    'second',
    'toward',
    'policy',
    'process',
    'appear',
    'market',
    'expect',
    'nation',
    'college',
    'course',
    'someone',
    'behind',
    'remain',
    'effect',
    'suggest',
    'control',
    'perhaps',
    'former',
    'require',
    'report',
    'better',
    'effort',
    'decide',
    'strong',
    'leader',
    'police',
    'finally',
    'return',
    'explain',
    'develop',
    'federal',
    'receive',
    'action',
    'season',
    'society',
    'player',
    'record',
    'special',
    'ground',
    'support',
    'matter',
    'center',
    'couple',
    'project',
    'produce',
    'figure',
    'street',
    'itself',
    'either',
    'picture',
    'recent',
    'product',
    'doctor',
    'patient',
    'worker',
    'certain',
    'simply',
    'source',
    'nearly',
    'choose',
    'century',
    'window',
    'listen',
    'culture',
    'billion',
    'chance',
    'brother',
    'energy',
    'period',
    'summer',
    'realize',
    'hundred',
    'likely',
    'letter',
    'choice',
    'single',
    'husband',
    'economy',
    'medical',
    'church',
    'current',
    'future',
    'involve',
    'defense',
    'anyone',
    'myself',
    'subject',
    'officer',
    'private',
    'quickly',
    'author',
    'foreign',
    'agency',
    'nature',
    'reduce',
    'common',
    'natural',
    'concern',
    'series',
    'similar',
    'usually',
    'animal',
    'factor',
    'decade',
    'article',
    'artist',
    'career',
    'despite',
    'central',
    'beyond',
    'exactly',
    'protect',
    'serious',
    'thought',
    'simple',
    'quality',
    'accept',
    'answer',
    'meeting',
    'prepare',
    'disease',
    'success',
    'amount',
    'ability',
    'growth',
    'degree',
    'wonder',
    'attack',
    'herself',
    'region',
    'pretty',
    'general',
    'feeling',
    'message',
    'outside',
    'arrive',
    'benefit',
    'forward',
    'lawyer',
    'present',
    'section',
    'sister',
    'compare',
    'design',
    'station',
    'clearly',
    'discuss',
    'indeed',
    'example',
    'various',
    'rather',
    'entire',
    'forget',
    'remove',
    'manager',
    'network',
    'science',
    'memory',
    'expert',
    'spring',
    'imagine',
    'tonight',
    'finish',
    'theory',
    'impact',
    'respond',
    'charge',
    'popular',
    'reveal',
    'weapon',
    'contain',
    'measure',
    'manage',
    'camera',
    'perform',
    'weight',
    'evening',
    'affect',
    'inside',
    'mention',
    'writer',
    'trouble',
    'middle',
    'instead',
    'improve',
    'detail',
    'method',
    'soldier',
    'reflect',
    'sexual',
    'surface',
    'purpose',
    'pattern',
    'machine',
    'address',
    'cancer',
    'reality',
    'finger',
    'garden',
    'notice',
    'modern',
    'partner',
    'kitchen',
    'budget',
    'capital',
    'victim',
    'threat',
    'account',
    'dinner',
    'western',
    'relate',
    'travel',
    'debate',
    'prevent',
    'citizen',
    'senior',
    'assume',
    'mission',
    'suffer',
    'speech',
    'option',
    'forest',
    'global',
    'Senate',
    'reform',
    'access',
    'publish',
    'release',
    'opinion',
    'credit',
    'corner',
    'recall',
    'version',
    'safety',
    'income',
    'species',
    'strike',
    'freedom',
    'nobody',
    'achieve',
    'object',
    'concept',
    'client',
    'perfect',
    'conduct',
    'examine',
    'please',
    'attend',
    'variety',
    'nuclear',
    'spirit',
    'replace',
    'British',
    'feature',
    'weekend',
    'battle',
    'African',
    'crisis',
    'define',
    'easily',
    'element',
    'vision',
    'status',
    'normal',
    'Chinese',
    'slowly',
    'driver',
    'attempt',
    'handle',
    'survey',
    'winter',
    'village',
    'Soviet',
    'refuse',
    'screen',
    'reader',
    'express',
    'willing',
    'target',
    'prison',
    'demand',
    'deliver',
    'vehicle',
    'observe',
    'flight',
    'average',
    'emerge',
    'bright',
    'operate',
    'sample',
    'settle',
    'collect',
    'highly',
    'mostly',
    'lesson',
    'promote',
    'living',
    'unless',
    'survive',
    'border',
    'gather',
    'critic',
    'aspect',
    'insist',
    'failure',
    'annual',
    'French',
    'comment',
    'affair',
    'regular',
    'spread',
    'ignore',
    'belief',
    'anybody',
    'murder',
    'review',
    'editor',
    'engage',
    'coffee',
    'anyway',
    'commit',
    'female',
    'afraid',
    'quarter',
    'native',
    'growing',
    'destroy',
    'context',
    'mistake',
    'clothes',
    'Indian',
    'promise',
    'active',
    'extend',
    'combine',
    'remind',
    'United',
    'victory',
    'healthy',
    'depend',
    'finding',
    'direct',
    'contact',
    'justice',
    'famous',
    'flower',
    'supply',
    'search',
    'eastern',
    'primary',
    'circle',
    'device',
    'bottom',
    'island',
    'studio',
    'damage',
    'plastic',
    'writing',
    'intend',
    'chicken',
    'theater',
    'session',
    'danger',
    'welcome',
    'desire',
    'injury',
    'respect',
    'Russian',
    'engine',
    'fourth',
    'expand',
    'ticket',
    'strange',
    'reading',
    'mental',
    'farmer',
    'planet',
    'explore',
    'obtain',
    'complex',
    'athlete',
    'invite',
    'repeat',
    'meaning',
    'married',
    'predict',
    'weather',
    'Supreme',
    'pocket',
    'breath',
    'balance',
    'connect',
    'belong',
    'advice',
    'somehow',
    'breast',
    'thanks',
    'yellow',
    'shadow',
    'analyst',
    'largely',
    'revenue',
    'locate',
    'county',
    'package',
    'bridge',
    'obvious',
    'anymore',
    'propose',
    'visitor',
    'profit',
    'hearing',
    'traffic',
    'muscle',
    'notion',
    'capture',
    'prefer',
    'museum',
    'beauty',
    'unique',
    'ethnic',
    'stress',
    'content',
    'select',
    'declare',
    'actual',
    'bottle',
    'hardly',
    'setting',
    'launch',
    'outcome',
    'defend',
    'ensure',
    'extent',
    'airport',
    'estate',
    'English',
    'pursue',
    'neither',
    'surgery',
    'correct',
    'Jewish',
    'branch',
    'relief',
    'manner',
    'ancient',
    'silence',
    'rating',
    'golden',
    'motion',
    'German',
    'gender',
    'typical',
    'except',
    'afford',
    'regime',
    'confirm',
    'appeal',
    'mirror',
    'length',
    'attract',
    'bedroom',
    'secret',
    'master',
    'totally',
    'stretch',
    'winner',
    'volume',
    'fashion',
    'pepper',
    'welfare',
    'opening',
    'overall',
    'divide',
    'initial',
    'oppose',
    'league',
    'careful',
    'employ',
    'holiday',
    'witness',
    'barely',
    'sector',
    'beneath',
    'beside',
    'limited',
    'faculty',
    'merely',
    'liberal',
    'massive',
    'decline',
    'invest',
    'towards',
    'expose',
    'narrow',
    'succeed',
    'fishing',
    'accuse',
    'useful',
    'reject',
    'talent',
    'escape',
    'unusual',
    'closely',
    'height',
    'assess',
    'plenty',
    'approve',
    'campus',
    'proper',
    'guilty',
    'acquire',
    'compete',
    'illegal',
    'column',
    'signal',
    'forever',
    'regard',
    'Israeli',
    'twenty',
    'display',
    'musical',
    'prayer',
    'suspect',
    'scholar',
    'warning',
    'climate',
    'cheese',
    'payment',
    'permit',
    'request',
    'emotion',
    'scream',
    'deeply',
    'airline',
    'library',
    'agenda',
    'recover',
    'factory',
    'unable',
    'expense',
    'arrest',
    'funding',
    'therapy',
    'housing',
    'visual',
    'fairly',
    'violent',
    'silent',
    'suppose',
    'widely',
    'wedding',
    'inform',
    'portion',
    'abandon',
    'tension',
    'leading',
    'bother',
    'consist',
    'alcohol',
    'enable',
    'saving',
    'desert',
    'double',
    'Spanish',
    'passage',
    'formal',
    'arrange',
    'deserve',
    'stream',
    'resolve',
    'racial',
    'Mexican',
    'symptom',
    'potato',
    'online',
    'breathe',
    'jacket',
    'rarely',
    'suicide',
    'passion',
    'priest',
    'amazing',
    'intense',
    'advance',
    'inspire',
    'adjust',
    'retire',
    'visible',
    'illness',
    'analyze',
    'attach',
    'parking',
    'severe',
    'enhance',
    'mystery',
    'impose',
    'poverty',
    'symbol',
    'monitor',
    'digital',
    'heavily',
    'missile',
    'equally',
    'command',
    'clinic',
    'veteran',
    'capable',
    'nervous',
    'tourist',
    'crucial',
    'tomato',
    'butter',
    'deficit',
    'journey',
    'mixture',
    'surely',
    'glance',
    'fellow',
    'smooth',
    'nearby',
    'silver',
    'whisper',
    'junior',
    'throat',
    'salary',
    'anxiety',
    'unlike',
    'resist',
    'embrace',
    'assist',
    'viewer',
    'secure',
    'testing',
    'stomach',
    'install',
    'recipe',
    'wooden',
    'concert',
    'channel',
    'extreme',
    'drawing',
    'protein',
    'absence',
    'rapidly',
    'honest',
    'speaker',
    'restore',
    'origin',
    'quietly',
    'advise',
    'wealth',
    'deputy',
    'assure',
    'dealer',
    'utility',
    'highway',
    'routine',
    'phrase',
    'Muslim',
    'Islamic',
    'refugee',
    'switch',
    'barrier',
    'killer',
    'assign',
    'classic',
    'heaven',
    'distant',
    'Italian',
    'ceiling',
    'button',
    'roughly',
    'lawsuit',
    'burden',
    'chamber',
    'string',
    'profile',
    'penalty',
    'resort',
    'tissue',
    'cabinet',
    'broken',
    'proceed',
    'stupid',
    'dispute',
    'fortune',
    'occupy',
    'cousin',
    'genetic',
    'adviser',
    'retain',
    'latter',
    'whereas',
    'terror',
    'Olympic',
    'bullet',
    'square',
    'gently',
    'fiction',
    'detect',
    'senator',
    'hunting',
    'remote',
    'journal',
    'testify',
    'mutual',
    'founder',
    'dismiss',
    'mainly',
    'freeze',
    'finance',
    'diverse',
    'working',
    'singer',
    'evolve',
    'partly',
    'unknown',
    'offense',
    'counter',
    'thirty',
    'justify',
    'protest',
    'treaty',
    'insight',
    'possess',
    'episode',
    'shortly',
    'assault',
    'sudden',
    'tongue',
    'license',
    'shelter',
    'tragedy',
    'funeral',
    'squeeze',
    'convert',
    'stable',
    'pretend',
    'elderly',
    'violate',
    'steady',
    'segment',
    'nowhere',
    'comfort',
    'radical',
    'vessel',
    'storage',
    'leather',
    'dining',
    'wisdom',
    'council',
    'garlic',
    'poetry',
    'fantasy',
    'scared',
    'gesture',
    'ongoing',
    'chapter',
    'divorce',
    'slight',
    'sustain',
    'differ',
    'custom',
    'fifteen',
    'satisfy',
    'briefly',
    'carbon',
    'closer',
    'consume',
    'scheme',
    'tobacco',
    'besides',
    'wealthy',
    'galaxy',
    'fighter',
    'hunter',
    'educate',
    'painful',
    'infant',
    'uniform',
    'qualify',
    'derive',
    'scandal',
    'helpful',
    'impress',
    'privacy',
    'fabric',
    'contest',
    'organic',
    'asleep',
    'tennis',
    'barrel',
    'bombing',
    'modest',
    'explode',
    'stroke',
    'handful',
    'horizon',
    'curious',
    'prompt',
    'absorb',
    'cotton',
    'flavor',
    'undergo',
    'orange',
    'assert',
    'edition',
    'valley',
    'versus',
    'appoint',
    'hungry',
    'wander',
    'submit',
    'legacy',
    'battery',
    'arrival',
    'cluster',
    'shower',
    'depict',
    'garage',
    'borrow',
    'comedy',
    'twelve',
    'weekly',
    'habitat',
    'devote',
    'ethics',
    'actress',
    'summit',
    'gifted',
    'medium',
    'running',
    'basket',
    'worried',
    'portray',
    'powder',
    'cookie',
    'carrier',
    'cooking',
    'admire',
    'miracle',
    'exceed',
    'rhythm',
    'killing',
    'lovely',
    'charity',
    'script',
    'tactic',
    'venture',
    'grocery',
    'exhibit',
    'blanket',
    'margin',
    'recruit',
    'horror',
    'painter',
    'courage',
    'defeat',
    'sacred',
    'formula',
    'captain',
    'gallery',
    'soccer',
    'tunnel',
    'fitness',
    'virtue',
    'abroad',
    'makeup',
    'inquiry',
    'compose',
    'legend',
    'remark',
    'resign',
    'reward',
    'gentle',
    'related',
    'lightly',
    'invent',
    'ritual',
    'insect',
    'salmon',
    'trading',
    'combat',
    'surgeon',
    'physics',
    'counsel',
    'excited',
    'bitter',
    'serving',
    'subtle',
    'greatly',
    'bishop',
    'pleased',
    'sponsor',
    'ethical',
    'export',
    'entitle',
    'evident',
    'essence',
    'exclude',
    'closet',
    'retail',
    'pitcher',
    'excuse',
    'reverse',
    'missing',
    'deadly',
    'confuse',
    'monthly',
    'Korean',
    'lecture',
    'suburb',
    'swallow',
    'render',
    'enforce',
    'contend',
    'strict',
    'frankly',
    'hallway',
    'monster',
    'crystal',
    'written',
    'motive',
    'consult',
    'forgive',
    'maximum',
    'warrior',
    'temple',
    'outdoor',
    'random',
    'curtain',
    'domain',
    'cattle',
    'walking',
    'playoff',
    'minimum',
    'fiscal',
    'execute',
    'endure',
    'chronic',
    'strain',
    'guitar',
    'behave',
    'dancer',
    'retired',
    'trigger',
    'virtual',
    'colony',
    'closed',
    'convict',
    'modify',
    'landing',
    'govern',
    'ballot',
    'driving',
    'vitamin',
    'praise',
    'injure',
    'endless',
    'mandate',
    'canvas',
    'format',
    'turkey',
    'reserve',
    'genuine',
    'scatter',
    'convey',
    'relieve',
    'suspend',
    'frozen',
    'spouse',
    'pension',
    'resume',
    'sodium',
    'rebuild',
    'bounce',
    'pickup',
    'needle',
    'shuttle',
    'timing',
    'rescue',
    'firmly',
    'precise',
    'anxious',
    'liberty',
    'poster',
    'oxygen',
    'pastor',
    'punish',
    'equity',
    'doorway',
    'teenage',
    'statue',
    'pursuit',
    'repair',
    'decent',
    'endorse',
    'thereby',
    'purple',
    'eating',
    'sharply',
    'parade',
    'cancel',
    'candle',
    'entity',
    'garbage',
    'servant',
    'elegant',
    'vanish',
    'confess',
    'racism',
    'starter',
    'banking',
    'casual',
    'gravity',
    'enroll',
    'intent',
    'isolate',
    'hostage',
    'dynamic',
    'toilet',
    'hidden',
    'tender',
    'stumble',
    'lonely',
    'descend',
    'shared',
    'readily',
    'romance',
    'pillow',
    'circuit',
    'ruling',
    'lately',
    'coastal',
    'softly',
    'burning',
    'verbal',
    'tribal',
    'diamond',
    'import',
    'divine',
    'oversee',
    'trailer',
    'genius',
    'broker',
    'loyalty',
    'output',
    'nominee',
    'alleged',
    'rocket',
    'donate',
    'inmate',
    'tackle',
    'dignity',
    'carpet',
    'bubble',
    'seventh',
    'tightly',
    'dilemma',
    'shallow',
    'stadium',
    'bloody',
    'condemn',
    'accent',
    'shrimp',
    'costume',
    'statute',
    'cartoon',
    'hostile',
    'vaccine',
    'opposed',
    'voting',
    'patrol',
    'jewelry',
    'concede',
    'immune',
    'exotic',
    'drawer',
    'runner',
    'secular',
    'empire',
    'neutral',
    'biology',
    'whoever',
    'verdict',
    'puzzle',
    'subsidy',
    'tragic',
    'safely',
    'dessert',
    'eleven',
    'bureau',
    'utilize',
    'breeze',
    'costly',
    'rolling',
    'insert',
    'helmet',
    'minimal',
    'cocaine',
    'casino',
    'sibling',
    'hockey',
    'passing',
    'persist',
    'liquid',
    'foster',
    'bicycle',
    'filter',
    'rabbit',
    'exploit',
    'charter',
    'consent',
    'outfit',
    'workout',
    'patent',
    'hormone',
    'texture',
    'pencil',
    'custody',
    'banker',
    'eighth',
    'outline',
    'uncover',
    'behalf',
    'catalog',
    'stance',
    'compel',
    'someday',
    'instant',
    'trainer',
    'eyebrow',
    'inherit',
    'pioneer',
    'shrink',
    'fierce',
    'kingdom',
    'weaken',
    'openly',
    'unfair',
    'terrain',
    'deploy',
    'planner',
    'closest',
    'ladder',
    'jungle',
    'invade',
    'density',
    'Persian',
    'feather',
    'sphere',
    'tighten',
    'unfold',
    'partial',
    'collar',
    'streak',
    'builder',
    'glimpse',
    'premise',
  ];
  @override
  Widget build(BuildContext context) {
    return Scaffold(
        backgroundColor: Colors.white,
        body: Center(
            child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  DataTable(
                      dataRowHeight:MediaQuery. of(context). size. height/17 ,
                      columns: <DataColumn>[
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                        DataColumn(
                          label: Text(''),
                        ),
                      ],
                      columnSpacing: MediaQuery. of(context). size. height/45,
                      rows:[
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                            ]),

                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                            ]),
                        DataRow(
                            cells: [
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),
                                ),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                              DataCell(
                                Text(write_Puzzle_Letter(),
                                  style: TextStyle(fontSize: MediaQuery. of(context). size. height/40),),
                              ),
                            ]),
                      ]

                  ),
                  SizedBox(width: MediaQuery
                      .of(context)
                      .size
                      .width / 20,
                      height:MediaQuery
                          .of(context)
                          .size
                          .height / 40),
                  Text(words[0]+", "+words[1],
                    style: TextStyle(fontSize: MediaQuery
                        .of(context)
                        .size
                        .height / 30),
                  ),
                  Text(words[2]+", "+ words[3],
                    style: TextStyle(fontSize: MediaQuery
                        .of(context)
                        .size
                        .height / 30),
                  ),
                  Text(words[4],
                    style: TextStyle(fontSize: MediaQuery
                        .of(context)
                        .size
                        .height / 30),)
                ]
            )
        )
    );
  }
  String write_Random_Letter(){
    List<String> letters=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];
    Random random =new Random();
    return letters[random.nextInt(26)];
  }

  String write_Puzzle_Letter() {
    if (count == -1) {
      for (int i = 0; i < 144; i++) {
        puzzle[i] = write_Random_Letter();
      }
      pick_Random_Words();
      write_Puzzle_Words(puzzle, words[0], words[1], words[2], words[3], words[4]);
      words.sort();
    }
    count++;
    return puzzle[count];
  }
  write_Puzzle_Words(List<String> puzzle, String word_one, String word_two, String word_three, String word_four, String word_five) {
    Random random = new Random();
    // the row and column from the 'beginer of the words', rigth is positive and down is positive, later the word can be changed to reversed order so it makes more difficult the puzzle
    int row_one = random.nextInt(12);
    int row_two = random.nextInt(12);
    int row_three = random.nextInt(12 - word_three.length + 1);
    int row_four = random.nextInt(12 - word_four.length + 1);
    int row_five;
    int column_one = random.nextInt(12 - word_one.length + 1);
    int column_two = random.nextInt(12 - word_two.length + 1);
    int column_three = random.nextInt(12);
    int column_four = random.nextInt(12);
    int column_five;

    int direction_of_diagonal = random.nextInt(2);
    //  zero is SO, one is SE
    if(direction_of_diagonal==0){
      row_five = random.nextInt(12 - word_five.length + 1);
      column_five = random.nextInt(12 - word_five.length + 1);

      while (row_one == row_two || ((column_five >= column_one &&
          column_five <= column_one + word_one.length - 1 &&
          row_five <= row_one && row_five + word_five.length - 1 >= row_one) ||
          (column_five >= column_two &&
              column_five <= column_two + word_two.length - 1 &&
              row_five <= row_two &&
              row_five + word_five.length - 1 >= row_two))) {
        row_one = random.nextInt(12);
        row_two = random.nextInt(12);
      }

      while ((column_three >= column_one &&
          column_three <= column_one + word_one.length - 1 &&
          row_three <= row_one && row_three + word_three.length - 1 >= row_one) ||
          (column_three >= column_two &&
              column_three <= column_two + word_two.length - 1 &&
              row_three <= row_two &&
              row_three + word_three.length - 1 >= row_two)||
          (row_five >= row_three &&
              row_five <= row_three + word_three.length - 1 &&
              column_five <= column_three &&
              column_five + word_five.length - 1 >= column_three)) {
        column_three = random.nextInt(12);
        row_three = random.nextInt(12 - word_three.length + 1);

      }
      while ((column_four >= column_one &&
          column_four <= column_one + word_one.length - 1 &&
          row_four <= row_one && row_four + word_four.length - 1 >= row_one) ||
          (column_four >= column_two &&
              column_four <= column_two + word_two.length - 1 &&
              row_four <= row_two &&
              row_four + word_four.length - 1 >= row_two)||
          (row_five >= row_four &&
              row_five <= row_four + word_four.length - 1 &&
              column_five <= column_four &&
              column_five + word_five.length - 1 >= column_four)|| column_four==column_three) {
        column_four = random.nextInt(12);
        row_four = random.nextInt(12 - word_three.length + 1);
      }
    }else{
      row_five = random.nextInt(12 - word_five.length + 1);
      column_five =11- random.nextInt(12 - word_five.length + 1);
      while (row_one == row_two || (column_five >= column_one &&
          column_five <= column_one + word_one.length - 1 &&
          row_five <= row_one && row_five - word_five.length + 1 >= row_one) ||
          (column_five >= column_two &&
              column_five <= column_two + word_two.length - 1 &&
              row_five <= row_two &&
              row_five - word_five.length + 1 >= row_two)) {
        row_one = random.nextInt(12);
        row_two = random.nextInt(12);
      }

      while ((column_three >= column_one &&
          column_three <= column_one + word_one.length - 1 &&
          row_three <= row_one && row_three + word_three.length - 1 >= row_one) ||
          (column_three >= column_two &&
              column_three <= column_two + word_two.length - 1 &&
              row_three <= row_two &&
              row_three + word_three.length - 1 >= row_two)||
          (row_five >= row_three &&
              row_five <= row_three + word_three.length - 1 &&
              column_five <= column_three &&
              column_five - word_five.length - 1 >= column_three)) {
        column_three = random.nextInt(12);
        row_three = random.nextInt(12 - word_three.length + 1);
      }
      while ((column_four >= column_one &&
          column_four <= column_one + word_one.length - 1 &&
          row_four <= row_one && row_four + word_four.length - 1 >= row_one) ||
          (column_four >= column_two &&
              column_four <= column_two + word_two.length - 1 &&
              row_four <= row_two &&
              row_four + word_four.length - 1 >= row_two) ||
          (column_four == column_three)||
          (row_five >= row_four &&
              row_five <= row_four + word_four.length - 1 &&
              column_five <= column_four &&
              column_five + word_five.length - 1 >= column_four)|| column_four==column_three) {
        column_four = random.nextInt(12);
        row_four = random.nextInt(12 - word_three.length + 1);

      }
    }
    // now it just needs to write  the letters in the list string puzzle which in two possible ways original order or reverse order
    if (random.nextInt(2) == 0) {
      for (int i = 0; i < word_one.length; i++) {
        puzzle[row_one * 12 + i + column_one] = word_one[i];
      }
    } else {
      for (int i = 0; i < word_one.length; i++) {
        puzzle[row_one * 12 + i + column_one] = word_one[word_one.length - 1 - i];
      }
    }
    if (random.nextInt(2) == 0) {
      for (int i = 0; i < word_two.length; i++) {
        puzzle[row_two * 12 + i + column_two] = word_two[i];
      }
    } else {
      for (int i = 0; i < word_two.length; i++) {
        puzzle[row_two * 12 + i + column_two] = word_two[word_two.length - 1 - i];
      }
    }

    if (random.nextInt(2) == 0) {
      for (int i = 0; i < word_three.length; i++) {
        puzzle[(row_three + i) * 12 + column_three] = word_three[i];
      }
    } else {
      for (int i = 0; i < word_three.length; i++) {
        puzzle[(row_three + i) * 12 + column_three] = word_three[word_three.length - 1 - i];
      }
    }
    if (random.nextInt(2) == 0) {
      for (int i = 0; i < word_four.length; i++) {
        puzzle[(row_four + i) * 12 + column_four] = word_four[i];
      }
    } else {
      for (int i = 0; i < word_four.length; i++) {
        puzzle[(row_four + i) * 12 + column_four] = word_four[word_four.length - 1 - i];
      }
    }

    if (direction_of_diagonal == 0) {
      if (random.nextInt(2) == 0) {
        for (int i = 0; i < word_five.length; i++) {
          puzzle[(row_five + i) * 12 + column_five + i] = word_five[i];
        }
      } else {
        for (int i = 0; i < word_five.length; i++) {
          puzzle[(row_five + i) * 12 + column_five + i] = word_four[word_four.length - 1 - i];
        }
      }
    }else{
      if (random.nextInt(2) == 0) {
        for (int i = 0; i < word_five.length; i++) {
          puzzle[(row_five + i) * 12 + column_five - i] = word_five[i];
        }
      } else {
        for (int i = 0; i < word_five.length; i++) {
          puzzle[(row_five + i) * 12 + column_five - i] = word_four[word_four.length - 1 - i];
        }
      }
    }
  }

  pick_Random_Words(){
    Random random =new Random();
    int one = random.nextInt(1200);
    int two = random.nextInt(1200);
    int three = random.nextInt(1200);
    int four = random.nextInt(1200);
    int five = random.nextInt(1200);
    while (all[three].length == 7 || all[four].length == 7 || all[five].length == 7 || one==two || one==three || one == four || one==five || two==three || two==four||two==five||three==four||three==five||four==five) {
      one = random.nextInt(1200);
      two = random.nextInt(1200);
      three = random.nextInt(1200);
      four = random.nextInt(1200);
      five = random.nextInt(1200);
    }
    words[0]=all[one].toUpperCase();
    words[1]=all[two].toUpperCase();
    words[2]=all[three].toUpperCase();
    words[3]=all[four].toUpperCase();
    words[4]=all[five].toUpperCase();
  }
}